def dna_count(dna):
    dna = dna.upper()
    count_A = dna.count('A')
    count_C = dna.count('C')
    count_G = dna.count('G')
    count_T = dna.count('T')
    return count_A,count_C,count_G,count_T
    
def dna2rna(dna):
    rna = ''
    for symbol in dna:
        if symbol == 'A':
            rna = rna + 'A'
        elif symbol == 'T':
            rna = rna + 'U'
        elif symbol == 'C':
            rna = rna + 'C'
        elif symbol == 'G':
            rna = rna + 'G'
    return rna

def reverse_complement(seq):
    rna = ''
    for symbol in seq:
        if symbol == 'A':
            rna = rna + 'T'
        elif symbol == 'T':
            rna = rna + 'A'
        elif symbol == 'C':
            rna = rna + 'G'
        elif symbol == 'G':
            rna = rna + 'C'
    return (rna[::-1])

def mendels_law(hom,het,rec):
    #total organisms
    total = hom + het + rec
    
    #probability that the organism will have 2 recessive parents
    r = rec/total * (rec-1)/(total-1)
    #probability that the organism will have a recessive and heterozygous parent
    rh = rec/total * (het)/(total-1)
    #probability that the organism will have a heterozygous and recessive parent
    hr = het/total * (rec)/(total-1)
    #probability that the organism will have 2 heterozygous parents
    h = het/total * (het-1)/(total-1)
    
    #probability of organism being recessive based on parents (Punnett Square)
    rh = rh * .5
    hr = hr * .5
    h = h * .25
    
    #if 1 parent is homozygous dominant, the organism will always be dominant
    #return the probability of organism having a dominant allele
    return (1-(r+rh+hr+h))
    
print(mendels_law(2,2,2))

def fibonacci_rabbits(n,k):
    
    #base case
    if n <= 2:
        return 1
    
    #recursively iterate through function
    else:
        return fibonacci_rabbits(n-1,k) + fibonacci_rabbits(n-2,k)*k

print(fibonacci_rabbits(5,3))

def GC_content(dna_list):
    high = 0
    count_final = 0
    index = -1
    count = 0
    GC_count = 0
    for i in dna_list:
        index = index+1
        count = 0
        GC_count = 0
        for n in i:
            count = count+1
            if n == "C" or n == "G":
                GC_count = GC_count+1
        if GC_count > high:
            high = GC_count
            count_final = count
    percent = ((high/count_final)*100)
    return(index,percent)
    
def rna2codons(rna):
    genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '', 'UAG': '',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
    codon = ''
    for i in range( 0,int( len( rna ) / 3 ) ):
        codon += genetic_code.get(rna[3*i:3*i+3])
    return codon

def locate_substring(dna_snippet,dna):
    integerlist = [ i for i in range(len(dna_snippet)) if dna_snippet.startswith(dna, i) ] 
    return integerlist
    
def hamming_dist(dna1, dna2):
    counter = 0
    for int1,int2 in zip(dna1, dna2):
        if int1 != int2:
            counter = counter + 1
    return counter

def count_dom_phenotype(genotypes):
    #number of dominant offspring
    dom = 0
    
    #probabilities that each couple has of producing a dominant offspring
    #couples 0-2 have 100% chance of producing a dominant offspring
    genotypes[3] = genotypes[3] * .75
    genotypes[4] = genotypes[4] * .5
    genotypes[5] = genotypes[5] * 0
    
    #index through list to find number of dominant offspring
    for i in range(len(genotypes)):
        #each couple has 2 offspring
        if i == 0:
            dom += genotypes[0] * 2
        if i == 1:
            dom += genotypes[1] * 2
        if i == 2:
            dom += genotypes[2] * 2
        if i == 3:
            dom += genotypes[3] * 2
        if i == 4:
            dom += genotypes[4] * 2
        if i == 5:
            dom += genotypes[5] * 2

    #return final number of dominant offspring
    return dom
            
print(count_dom_phenotype([1,0,0,1,0,1]))

def source_rna(protein):
    genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
    number = 1   
    length = len(protein)
    for key in genetic_code.keys():
        if genetic_code[key] in protein:
            number+=1
        elif genetic_code[key] == "*":
            number+=len(protein)
    return number % 1000000
    
print(source_rna("MA"))
    

def splice_rna(dna, intron_list):
    dna_new = dna
    proteins = ''
    for i in range (0, len(intron_list)):
        dna_new = dna_new.replace(intron_list[i],'')
    rna = dna2rna(dna_new)
    proteins = rna2codons(rna)
    return proteins
