def find_splice(dna_motif, dna):
  position = 0
  positions = []
  while position != -1
    position=dna.find(dna_motif, position)
    if position != -1
      positions.append(position)
      position += 1
  return(positions)
  
def shared_motif(dna_list):
    string1 = dna_list[0]
    lengthstring1 =len(string1)
    common_string_list = [] #setup for a list of all the common strings within the given substrings

    for i in range(lengthstring1):
        for j in range(i+1,lengthstring1+1):
            possible_common_string = string1[i:j] #sets multiple different strings of different lengths within string1
            loop = True #for loop stated above
            for k in range(1, len(dna_list)):
                if possible_common_string not in dna_list[k]: #if the possible common string does not have common string in the dna list, the loop is false
                    loop = False
                    break
            if loop: #if the loop above is true
                common_string_list.append(possible_common_string) #if the possible common string has a common string in the dna list, add it to the list of common strings

    longest_similar_string = ""
    for string in common_string_list: #takes all the common strings found and finds the longest
        if len(string) > len(longest_similar_string): #loops through all strings and compares to find the longest
            longest_similar_string = string
    return longest_similar_string
  
def get_edges(dna_dict):
  
  #get all the values from dictionary
  set0 = dna_dict.values()
  #list of the first 3 letters in each strand
  set1=[i[0:3] for i in set0]
  #list of last 3 letters in each strand
  set2=[i[-3:] for i in set0]
  #list of only the keys from the dictionary
  set3 = list(dna_dict.keys())
  #initialize final result
  final = []
  
  #nested loop to compare the letters from set1 and set2
  for i in range(len(set1)):
      for j in range(len(set2)):
          #we don't want to return the same strand of DNA
          if i == j:
              continue
          #assemble adjacency list
          if set1[i] == set2[j]:
              final.insert(i,(set3[i],set3[j]))
  
  return final

def assemble_genome(dna_list):
    
    # Copy list to preserve data integrity
    dna_list_cur = dna_list.copy()
    
    # Represents the first string, last string, and the length of the combined superstring
    shortestString = ("", "", -1)
    
    # Return variable
    ret = ""
    
    # Remove 
    
    # Find shortest initial superstring
    for i in dna_list_cur:
        for j in dna_list_cur:
            if j != i:
                temp = findShortestSubString(i,j)
                if len(temp) < shortestString[2] or shortestString[2] == -1:
                    shortestString = (i, j, len(temp))
    
    # Add initial string to return variable and reduce list accordingly
    ret = findShortestSubString(shortestString[0], shortestString[1])
    
    dna_list_cur.remove(shortestString[0])
    dna_list_cur.remove(shortestString[1])
    print(ret)
    
    # Process the remaining elements in the list, updating the return variable every iteration of the loop
    while len(dna_list_cur) > 0:
        minString = ("", -1)
        for i in dna_list_cur:
            temp = findShortestSubString(ret, i)
            if len(temp) < minString[1] or minString[1] == -1:
                minString = (i, len(temp))
        ret = findShortestSubString(ret, minString[0])
        dna_list_cur.remove(minString[0])
        
    return ret
    
    
def findShortestSubString(str1, str2):
    
    # Check for greatest substring by adding sequential characters from the end of str2
    maxlen = -1
    for i in range(len(str2)):
        # print(str2[0:i])
        # print(str1[-1 * (i):])
        if str2[0:i] in str1 and str1[-1 * (i):] == str2[0:i]:
            
            # Save hightest position in str2
            maxlen = i
    
    # If there is no common substring, return combined strings
    if maxlen == -1:
        # print("No change")
        return str1 + str2
    # Otherwise, return str1 concatenated with the remaining unique portion of str2
    return str1 + str2[(maxlen):]
    
def perfect_match(rna):

  import math
  #perfect match doesn't exist if there is an unmatched node
  #factorial of either G & U or A & C is the amount of perfect matches for a pair of letters
  #multiply together factorial of either G & U or A & C
  n = math.factorial(rna.count('U'))*math.factorial(rna.count('G'))
  return n

from math import log10
def random_genome(dna, gc_content):
    CG_frequency = len(dna.replace("A", "").replace("T", "")) #removes A and T from dna to obtain frequency of C and G
    AT_frequency = len(dna.replace("C", "").replace("G", "")) #removes C and G from dna to obtain frequency of A and T
    match_probability = [] #list of random strings constructed with GC-content that will match the dna strings exactly 
    for i in range(0, len(gc_content)):
        equation_of_probability = (CG_frequency * log10((gc_content[i]) / 2)) + (AT_frequency * log10((1 - (gc_content[i])) / 2)) #probability equation
        match_probability.append(equation_of_probability) #adds log probabilities to the list
    return match_probability
    
def rev_palindrome(dna):
  
  #initialize list
  final = []

  #nested for loop 
  for i in range(len(dna)):
      for j in range(4,12):
          #using reverse compliment to create a string to compare to the DNA substring
          comp = reverse_complement(dna[i:i+j])
          #compare the DNA substring to the reverse compliment
          #make sure the iteration does not exceed the length of DNA
          if (dna[i:i+j] == comp) and (i+j<= len(dna)):
              final.append((i,j))
              
  return final

def reverse_complement(seq):
    rna = ''
    for symbol in seq:
        if symbol == 'A':
            rna = rna + 'T'
        elif symbol == 'T':
            rna = rna + 'A'
        elif symbol == 'C':
            rna = rna + 'G'
        elif symbol == 'G':
            rna = rna + 'C'
    return (rna[::-1])


